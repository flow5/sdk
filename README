/***********************************************************************************************************************

	Copyright (c) 2011 Paul Greyson

	Permission is hereby granted, free of charge, to any person 
	obtaining a copy of this software and associated documentation 
	files (the "Software"), to deal in the Software without 
	restriction, including without limitation the rights to use, 
	copy, modify, merge, publish, distribute, sublicense, and/or 
	sell copies of the Software, and to permit persons to whom the 
	Software is furnished to do so, subject to the following 
	conditions:

	The above copyright notice and this permission notice shall be 
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
	OTHER DEALINGS IN THE SOFTWARE.

***********************************************************************************************************************/


***** TOOLS *****

* Install

graphviz
nodejs
npm
http://cairographics.org
sudo port install cairo

https://github.com/mkitt/nodelint.tmbundle
	seems that it's necessary to symlink from the Support/bin/nodelint folder to the node lint installation location

node packages:

json-command
nodelint
paperboy
jsdom
cli	
uglify-js

Others?


** Usage

To serve an application

	From flow5 root
		> node server/devserv.js

	In browser:
		http://HOSTNAME.local:8008/generate?app=APPNAME
	
command line:

	> node nodeharness.js 2>&1 >/dev/null | json
		
	

***** BASICS (w.i.p) *****
	
	An application is constructed by creating

		1) a flowspec
		2) flow delegates
		3) view delegates
		4) html templates
	
	1) The core of the application is the flow spec
	
		The flow spec defines all of the application flow logic by specifying a hierarchical set of nodes
		These nodes are used to generate the HTML DOM scaffolding 
	
	
		There are 4 types of nodes: set, switcher, flow, subflow. default (and most common) is flow
	
		- set is the base type and allows transition or selection semantics

		- flow is a restricted type of set that assumes every forward transition has a back transition
			for flows, the framework will record the from location of every transition and install it on the target node
			also, in a flow, the framework can dispose of views when going back. in a set the framework cannot
			so it doesn't release the views until the set is exited
	
		- switcher is a restricted type of set that does not allow transitions between nodes
			for switchers, the framework will create a UI element for the node. this is customizable TBD
	
		- subflow is a restricted type of node that is used only within the subflow decision tree
		
	2) flow delegates implement application specific behaviors. these include
	
		- lifecycle events
		- subflow methods
		- application specific functions
	
	3) view delegates are used to customize the presentation of nodes
	
		view delegates may implement methods for the life cycle events:
	
		- initialize
		called before the view element has been inserted into the DOM
	
		- viewWillBecomeActive
		called after the view element has been inserted into the DOM but before it has been presented
	
		- viewWillBecomeInactive
		called before the view element will be made 'inactive' note this does not necessarily mean it will not be visible
	
		- viewDidBecomeActive
		called after the view element has been presented and the associated node is active
	
		- viewDidBecomeInactive
		called after the view element has been made inactive. note this does not necessarily mean it will not be visible
	
		- release (TBD)
		called after the view element has been removed from the DOM
	
	
	4) html templates are used by view delegates
	
		html templates may include any html
		they may also use f5_widget attributes which will result in widgets being constructed and attached
		to the DOM when the template is loaded
		

		An application causes its files to be included with its manifest.js file
	
		flow and view delegates are registered with the framework by adding prototype objects to the F5.ViewDelegates and
		F5.FlowDelegates name spaces

		NOTE: delegates have a flat namespace based on nod ids. This works because while the same behaviors may
		be present at different locations in the application, it's unlikely that it would be necessary or desirable
		to have nodes with the same ID but different behaviors
		
		
(WIP) Also represented in the flow spec is the data model for the application. This is done by defining:
	
	1) schemas
	
		Each node may have an object called 'schemas' which contains a map of schema definitions compliant with
			http://tools.ietf.org/html/draft-zyp-json-schema-03

		In addition to the normal schema fields, an additional field "example" provides sample data for use in 
		designing screens.

		In debug builds, the devserver will validate both the schema of the flowspec and also that integrity
		of the embedded schema references
		
		In release builds the schema blocks will be stripped from the flow spec

	2) models

		each node may define two models:
		
		models: {
			inFlow: schema
			cache: schema
		}
	
		inModel is used to validate the parameters which are passed from a node upstream in the flow
		cacheModel is used to specify the nodes local cache structure 

		while it is possible for flow or view delegates to use private data structures, it is recommended
		that the cache model be used exclusively. this will allow the framework to properly serialize/deserialize
		the state of the node
		
	The data model interface
	
		flowdelegates and viewdelegates are provided a reference to the node data model
		model.forEach() will iterate over the contents of the model
		model.get(path) returns a model wrapper for the path
		model.value() will return a deep copy of the referenced value
		model.set(path, obj) will deep copy the obj into the data model
		
		in debug builds model.set will validate against the model's schema
		
	In addition to the node model, services will define in and out parameter models which will be used
	to validate data in debug builds 	
		


	
	Other concepts:
		
	Subflows
	
		subflows may be of either user input or non user input types
		when no user input is specified, the framework looks for a delegate method for the subflow's node
		if there is none, then it looks to the root delegate for a method
		
		when user input is required, the viewcontroller will create an appropriate user interface element
		when the user has made a choice, a corresponding Choice method is called on the delegate for the node
		or the root delegate with the users's choice

		a subflow may terminate with null or with a name. if null, control is returned to the current node
		if a name, then a transition or selection is executed to the named target		
				
	Transitions
	
		each node can specify a list of transitions. each item in the list may be
		1) a string with the name of the node which is the target of the transition
		2) and object with to: the name of the transition target and animation: the name of the animation to use
		
		
	Widgets
	
		widgets are javscript objects which control DOM subtrees and provide an interface to view delegates
		widgets may rely on particular div structures and custom attributes within the DOM subtrees they control								